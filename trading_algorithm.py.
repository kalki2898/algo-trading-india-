import pandas as pd
from datetime import datetime, timedelta
from gemini import PrivateClient

# Set up your Gemini API credentials
api_key = 'your_api_key'
api_secret = 'your_api_secret'
client = PrivateClient(api_key, api_secret, sandbox=True)  # Use 'sandbox=False' for live trading

def get_historical_data(symbol, timeframe, limit):
    # Get historical data from Gemini
    end_time = datetime.utcnow()
    start_time = end_time - timedelta(days=365)  # Adjust the timeframe as needed

    candles = client.get_candles(symbol, start_time, end_time, timeframe, limit=limit)
    df = pd.DataFrame(candles, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])

    # Convert timestamps to datetime objects
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')

    return df

def moving_average_strategy(df, short_window, long_window):
    # Create short and long-term moving averages
    df['short_ma'] = df['close'].rolling(window=short_window, min_periods=1).mean()
    df['long_ma'] = df['close'].rolling(window=long_window, min_periods=1).mean()

    # Generate signals based on moving average crossovers
    df['signal'] = 0  # 0 for no signal
    df['signal'][short_window:] = np.where(df['short_ma'][short_window:] > df['long_ma'][short_window:], 1, -1)

    # Generate positions based on signals
    df['position'] = df['signal'].diff()

    return df

def backtest_strategy(df):
    # Backtest the strategy
    initial_balance = 10000  # Initial portfolio balance
    balance = initial_balance
    position_size = 0.1  # 10% of the portfolio for each trade

    for index, row in df.iterrows():
        if row['position'] == 1:  # Buy signal
            balance -= position_size * row['close']
        elif row['position'] == -1:  # Sell signal
            balance += position_size * row['close']

    # Calculate final portfolio balance
    final_balance = balance + (position_size * df['close'].iloc[-1] * df['position'].iloc[-1])

    return final_balance

# Example usage
symbol = 'BTCUSD'
timeframe = '1hr'
limit = 1000
short_window = 50
long_window = 200

# Get historical data
historical_data = get_historical_data(symbol, timeframe, limit)

# Apply the strategy
strategy_result = moving_average_strategy(historical_data.copy(), short_window, long_window)

# Backtest the strategy
final_balance = backtest_strategy(strategy_result)

print(f"Initial Balance: ${initial_balance}")
print(f"Final Balance: ${final_balance}")

